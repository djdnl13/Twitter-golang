// Code generated by mockery v1.0.0
package mocks

import amqp "github.com/streadway/amqp"

import mock "github.com/stretchr/testify/mock"

// IMessagingClient is an autogenerated mock type for the IMessagingClient type
type IMessagingClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IMessagingClient) Close() {
	_m.Called()
}

// ConnectToBroker provides a mock function with given fields: connectionString
func (_m *IMessagingClient) ConnectToBroker(connectionString string) {
	_m.Called(connectionString)
}

// Publish provides a mock function with given fields: msg, exchangeName, exchangeType
func (_m *IMessagingClient) Publish(msg []byte, exchangeName string, exchangeType string) error {
	ret := _m.Called(msg, exchangeName, exchangeType)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, string) error); ok {
		r0 = rf(msg, exchangeName, exchangeType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishOnQueue provides a mock function with given fields: msg, queueName
func (_m *IMessagingClient) PublishOnQueue(msg []byte, queueName string) error {
	ret := _m.Called(msg, queueName)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(msg, queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: exchangeName, exchangeType, consumerName, handlerFunc
func (_m *IMessagingClient) Subscribe(exchangeName string, exchangeType string, consumerName string, handlerFunc func(amqp.Delivery)) error {
	ret := _m.Called(exchangeName, exchangeType, consumerName, handlerFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, func(amqp.Delivery)) error); ok {
		r0 = rf(exchangeName, exchangeType, consumerName, handlerFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeToQueue provides a mock function with given fields: queueName, consumerName, handlerFunc
func (_m *IMessagingClient) SubscribeToQueue(queueName string, consumerName string, handlerFunc func(amqp.Delivery)) error {
	ret := _m.Called(queueName, consumerName, handlerFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, func(amqp.Delivery)) error); ok {
		r0 = rf(queueName, consumerName, handlerFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
